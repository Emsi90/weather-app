{"version":3,"sources":["components/WeatherData/WeatherData.css","components/UI/Spinner/Spinner.css","components/WeatherData/WeatherData.js","components/UI/Spinner/Spinner.js","containers/WeaterBuilder/WeaterBuilder.js","App.js","serviceWorker.js","index.js","containers/WeaterBuilder/WeatherBuilder.css"],"names":["module","exports","WeatherContent","WeatherContent__header","WeatherContent__date","WeatherContent__head","WeatherContent__icon","WeatherContent__info","WeatherContent__temp","WeatherContent__startText","loader","loaderItem","loaderItem-1","loaderItem-2","loaderItem-3","loaderItem-4","loaderItem-5","loaderItem-6","loaderItem-7","loaderItem-8","loaderItem-9","loaderItem-10","weatherData","props","data","error","react_default","a","createElement","className","classes","WeatherContent__box","Date","toDateString","name","WeatherContent__sun","sys","sunrise","toLocaleTimeString","sunset","src","weather","icon","alt","description","main","temp","spinner","API_KEY","WaeterBuilder","state","cityName","countryCode","weatherInfo","errorMsg","latitude","longitude","locationError","bgImage","serverError","isLoading","getWeatherData","e","preventDefault","_this","setState","fetch","concat","then","response","checkConnection","serverErrorHandler","catch","getBgImage","json","res","hits","largeImageURL","getValue","Object","defineProperty","target","value","getLocationInfo","status","loadPosition","_callee","position","_position$coords","regenerator_default","wrap","_context","prev","next","getCurrentPosition","sent","coords","t0","message","stop","this","options","arguments","length","undefined","Promise","resolve","reject","navigator","geolocation","containerStyle","backgroundImage","console","log","Spinner_Spinner","WeatherData_WeatherData","WeatherContainer","WeatherBgImage","style","WeatherForm","onSubmit","type","onChange","placeholder","FormText","onClick","WeatherBox","Component","App","WeaterBuilder","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f0fdfdc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"WeatherContent\":\"WeatherData__WeatherContent__9OaJ6\",\"WeatherContent__header\":\"WeatherData__WeatherContent__header__1xj1A\",\"WeatherContent__date\":\"WeatherData__WeatherContent__date__3Njos\",\"WeatherContent__head\":\"WeatherData__WeatherContent__head__4p_YI\",\"WeatherContent__icon\":\"WeatherData__WeatherContent__icon__3sSM7\",\"WeatherContent__info\":\"WeatherData__WeatherContent__info__2renY\",\"WeatherContent__temp\":\"WeatherData__WeatherContent__temp__2QVgl\",\"WeatherContent__startText\":\"WeatherData__WeatherContent__startText__q1B_B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Spinner__loader__3qv_p\",\"loaderItem\":\"Spinner__loaderItem__ipI9A\",\"loaderItem-1\":\"Spinner__loaderItem-1__Wb3kj\",\"loaderItem-2\":\"Spinner__loaderItem-2__24dz-\",\"loaderItem-3\":\"Spinner__loaderItem-3__2ZEdH\",\"loaderItem-4\":\"Spinner__loaderItem-4__1Ryzy\",\"loaderItem-5\":\"Spinner__loaderItem-5__2FLOj\",\"loaderItem-6\":\"Spinner__loaderItem-6__2OZts\",\"loaderItem-7\":\"Spinner__loaderItem-7__2ECAd\",\"loaderItem-8\":\"Spinner__loaderItem-8__27iVZ\",\"loaderItem-9\":\"Spinner__loaderItem-9__qr0iv\",\"loaderItem-10\":\"Spinner__loaderItem-10___5o9z\"};","import React from 'react';\r\n\r\nimport classes from './WeatherData.css';\r\n\r\nconst weatherData = (props) => {\r\n  let content = null;\r\n  if(props.data && props.error) {\r\n    content = (\r\n      <div className={classes.WeatherContent}>\r\n        <div className={classes.WeatherContent__header}>\r\n          <div className={classes.WeatherContent__box}>\r\n            <p className={classes.WeatherContent__date}>{new Date().toDateString()}</p>\r\n            <h1 className={classes.WeatherContent__head}>{props.data.name}</h1>\r\n          </div>\r\n          <div className={classes.WeatherContent__box}>\r\n            <p className={classes.WeatherContent__sun}>Sunrise: <b>{new Date(props.data.sys.sunrise * 1000).toLocaleTimeString()}</b></p>\r\n            <p className={classes.WeatherContent__sun}>Sunset: <b>{new Date(props.data.sys.sunset * 1000).toLocaleTimeString()}</b></p>\r\n          </div>\r\n        </div>\r\n        <div className={classes.WeatherContent__info}>\r\n          <img src={'./images/' + props.data.weather[0].icon + '.png'} className={classes.WeatherContent__icon} alt={props.data.weather[0].description}/>\r\n          <div>\r\n            <p className={classes.WeatherContent__temp}>Temp. <span>{props.data.main.temp} Â°C</span></p>\r\n            <p>{props.data.weather[0].description}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    content = <p className={classes.WeatherContent__startText}>Complete the data to display...</p>\r\n  }\r\n  return content;\r\n}\r\n\r\nexport default weatherData;\r\n","import React from 'react';\r\n\r\nimport classes from './Spinner.css';\r\n\r\nconst spinner = () => (\r\n  <div className={classes.loader}>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n  </div>\r\n);\r\n\r\nexport default spinner;","import React, { Component } from 'react';\r\n\r\nimport WeatherData from '../../components/WeatherData/WeatherData';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './WeatherBuilder.css';\r\n\r\nconst API_KEY = '64bd459b55ce780015ef29df99092a33';\r\n\r\nclass WaeterBuilder extends Component {\r\n\r\n  state = {\r\n    cityName: '',\r\n    countryCode: '',\r\n    weatherInfo: null,\r\n    error: false,\r\n    errorMsg: '',\r\n    latitude: '',\r\n    longitude: '',\r\n    locationError: '',\r\n    bgImage: '',\r\n    serverError: '',\r\n    isLoading: false\r\n  }\r\n\r\n  getWeatherData = (e) => {\r\n    e.preventDefault();\r\n    if(this.state.cityName && this.state.countryCode) {\r\n      this.setState({isLoading: true});\r\n\r\n      // Fetch Weather Info\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.cityName},${this.state.countryCode}&appid=${API_KEY}&units=metric`)\r\n        .then(response => this.checkConnection(response))\r\n        .then(data => this.serverErrorHandler(data))\r\n        .catch(error => error);\r\n\r\n        // Fetch Image Background\r\n        this.getBgImage();\r\n        \r\n    } else {\r\n      this.setState({error: true});\r\n    }\r\n  }\r\n\r\n  getBgImage = () => {\r\n    fetch(`https://pixabay.com/api/?key=11033926-5ce039cd01c78ab8f1598fd4f&q=${this.state.cityName}&image_type=photo&per_page=3`)\r\n    .then(response => response.json())\r\n    .then(res => this.setState({bgImage: res.hits[1].largeImageURL}))\r\n    .catch(error => error);\r\n  }\r\n\r\n  getValue = (e) => {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  getLocationInfo = () => {\r\n    this.setState({isLoading: true});\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${API_KEY}&units=metric`)\r\n      .then(response => this.checkConnection(response))\r\n      .then(data => this.serverErrorHandler(data))\r\n      .catch(error => error);\r\n  }\r\n\r\n  checkConnection = (response) => {\r\n    if(response.status === 200) {\r\n      this.setState({serverError:false});\r\n      return response.json();\r\n    } else {\r\n      this.setState({serverError:true});\r\n    }\r\n  }\r\n\r\n  serverErrorHandler = (data) => {\r\n    this.setState({isLoading: false});\r\n    if(this.state.serverError) {\r\n      return this.setState({errorMsg: 'There is no information for this data...', weatherInfo: null});\r\n    } else {\r\n      return this.setState({weatherInfo: data, error: false, errorMsg: ''});\r\n    }\r\n  }\r\n\r\n\r\n  loadPosition = async () => {\r\n    try {\r\n      const position = await this.getCurrentPosition();\r\n      const { latitude, longitude } = position.coords;\r\n      this.setState({\r\n        latitude,\r\n        longitude\r\n      });\r\n      this.getLocationInfo();\r\n      this.setState({bgImage: ''});\r\n    } catch (error) {\r\n      this.setState({errorMsg: error.message, weatherInfo: null});\r\n    }\r\n  };\r\n\r\n  getCurrentPosition = (options = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let containerStyle = {\r\n      backgroundImage: 'url(' + this.state.bgImage + ')'\r\n    }\r\n\r\n    if(this.state.weatherInfo) {\r\n      console.log(this.state.weatherInfo);\r\n    }\r\n    let error = '';\r\n    if(this.state.error) {\r\n      error = <p className={classes.errorMsg}>Enter correct data!</p>;\r\n    } else if (this.state.errorMsg) {\r\n      error = <p className={classes.errorMsg}>{this.state.errorMsg}</p>\r\n    }else if (this.state.locationError) {\r\n      error = <p className={classes.errorMsg}>{this.state.locationError}</p>\r\n    }\r\n\r\n    let weatherInfo = null;\r\n    if(this.state.isLoading) {\r\n      weatherInfo = <Spinner />;\r\n    } else {\r\n      weatherInfo = <WeatherData data={this.state.weatherInfo} error={!this.state.errorMsg}/>\r\n    }\r\n    return (\r\n      <div className={classes.WeatherContainer}>\r\n        <div className={classes.WeatherBgImage} style={containerStyle}></div>\r\n        <div className={classes.WeatherForm}>\r\n          <form onSubmit={this.getWeatherData}>\r\n            <input type=\"text\" name='cityName' value={this.state.cityName} onChange={this.getValue} placeholder=\"City...\"/>\r\n            <input type=\"text\" name='countryCode' value={this.state.countryCode} onChange={this.getValue} placeholder=\"City Code...\"/>\r\n            <button type=\"submit\">Get Weather</button>\r\n          </form>\r\n          <span className={classes.FormText}>or</span>\r\n          <button onClick={this.loadPosition}>Get Your Position</button>\r\n          {error}\r\n        </div>\r\n        <div className={classes.WeatherBox}>\r\n          {weatherInfo}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WaeterBuilder;\r\n","import React, { Component } from 'react';\n\n// import classes from './App.css';\nimport WeatherBuilder from './containers/WeaterBuilder/WeaterBuilder';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n          <WeatherBuilder />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WeatherContainer\":\"WeatherBuilder__WeatherContainer__3NF30\",\"WeatherBgImage\":\"WeatherBuilder__WeatherBgImage__vPmXp\",\"WeatherForm\":\"WeatherBuilder__WeatherForm__oMvFB\",\"FormText\":\"WeatherBuilder__FormText__1u0Gr\",\"WeatherBox\":\"WeatherBuilder__WeatherBox__3lwr0\",\"errorMsg\":\"WeatherBuilder__errorMsg__3H6ml\"};"],"sourceRoot":""}