{"version":3,"sources":["components/UI/Spinner/Spinner.css","components/WeatherData/WeatherData.js","components/UI/Spinner/Spinner.js","containers/WheaterBuilder/WheaterBuilder.js","App.js","serviceWorker.js","index.js","App.css"],"names":["module","exports","loader","loaderItem","loaderItem-1","loaderItem-2","loaderItem-3","loaderItem-4","loaderItem-5","loaderItem-6","loaderItem-7","loaderItem-8","loaderItem-9","loaderItem-10","weatherData","props","temp","sunrise","sunset","data","error","console","log","main","Date","sys","toLocaleTimeString","react_default","a","createElement","spinner","className","classes","API_KEY","WhaeterBuilder","state","cityName","countryCode","weatherInfo","errorMsg","latitude","longitude","locationError","isLoading","getWheatherData","serverError","_this","setState","fetch","concat","then","response","status","json","catch","getValue","e","Object","defineProperty","target","name","value","getLocationInfo","loadPosition","_callee","position","_position$coords","regenerator_default","wrap","_context","prev","next","getCurrentPosition","sent","coords","t0","message","stop","this","options","arguments","length","undefined","Promise","resolve","reject","navigator","geolocation","Spinner_Spinner","WeatherData","type","onChange","onClick","Component","App","AppHeader","WheaterBuilder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister","AppLogo","App-logo-spin","AppLink"],"mappings":"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","file":"static/js/main.084a6e2a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Spinner__loader__3qv_p\",\"loaderItem\":\"Spinner__loaderItem__ipI9A\",\"loaderItem-1\":\"Spinner__loaderItem-1__Wb3kj\",\"loaderItem-2\":\"Spinner__loaderItem-2__24dz-\",\"loaderItem-3\":\"Spinner__loaderItem-3__2ZEdH\",\"loaderItem-4\":\"Spinner__loaderItem-4__1Ryzy\",\"loaderItem-5\":\"Spinner__loaderItem-5__2FLOj\",\"loaderItem-6\":\"Spinner__loaderItem-6__2OZts\",\"loaderItem-7\":\"Spinner__loaderItem-7__2ECAd\",\"loaderItem-8\":\"Spinner__loaderItem-8__27iVZ\",\"loaderItem-9\":\"Spinner__loaderItem-9__qr0iv\",\"loaderItem-10\":\"Spinner__loaderItem-10___5o9z\"};","import React from 'react';\r\n\r\nconst weatherData = (props) => {\r\n  let temp = '';\r\n  let sunrise = null;\r\n  let sunset = null;\r\n  if(props.data && props.error) {\r\n    console.log(props.data.main.temp);\r\n    temp = props.data.main.temp;\r\n    sunrise = new Date(props.data.sys.sunrise * 1000).toLocaleTimeString();\r\n    sunset = new Date(props.data.sys.sunset * 1000).toLocaleTimeString();\r\n  }\r\n  return (\r\n    <div>\r\n      <p>Temperatura: {temp} Â°C</p>\r\n      <p>Sunrise: {sunrise}</p>\r\n      <p>Sunset: {sunset}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default weatherData;\r\n","import React from 'react';\r\n\r\nimport classes from './Spinner.css';\r\n\r\nconst spinner = () => (\r\n  <div className={classes.loader}>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n   <span className={classes.loaderItem}></span>\r\n  </div>\r\n);\r\n\r\nexport default spinner;","import React, { Component } from 'react';\r\n\r\nimport WeatherData from '../../components/WeatherData/WeatherData';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nconst API_KEY = '64bd459b55ce780015ef29df99092a33';\r\n\r\nclass WhaeterBuilder extends Component {\r\n\r\n  state = {\r\n    cityName: '',\r\n    countryCode: '',\r\n    weatherInfo: null,\r\n    error: false,\r\n    errorMsg: '',\r\n    latitude: '',\r\n    longitude: '',\r\n    locationError: '',\r\n    isLoading: false\r\n  }\r\n\r\n  getWheatherData = () => {\r\n    let serverError = false;\r\n    if(this.state.cityName && this.state.countryCode) {\r\n      this.setState({isLoading: true});\r\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.cityName},${this.state.countryCode}&appid=${API_KEY}&units=metric`)\r\n        .then(response => {\r\n          if(response.status === 200) {\r\n            return response.json();\r\n          } else {\r\n            serverError = true;\r\n          }\r\n        })\r\n        .then(data => {\r\n          this.setState({isLoading: false});\r\n          if(serverError) {\r\n            return this.setState({errorMsg: 'Nie ma informacji dla tych danych...', weatherInfo: null});\r\n          } else {\r\n            return this.setState({weatherInfo: data, error: false, errorMsg: ''});\r\n         }\r\n        })\r\n        .catch(error => error);\r\n    } else {\r\n      this.setState({error: true});\r\n    }\r\n  }\r\n\r\n  getValue = (e) => {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  }\r\n\r\n  getLocationInfo = () => {\r\n    let serverError = false;\r\n    this.setState({isLoading: true});\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&appid=${API_KEY}&units=metric`)\r\n      .then(response => {\r\n        if(response.status === 200) {\r\n          return response.json();\r\n        } else {\r\n          serverError = true;\r\n        }\r\n      })\r\n      .then(data => {\r\n        this.setState({isLoading: false});\r\n        if(serverError) {\r\n          return this.setState({errorMsg: 'Nie ma informacji dla tych danych...', weatherInfo: null});\r\n        } else {\r\n          return this.setState({weatherInfo: data, error: false, errorMsg: ''});\r\n        }\r\n      })\r\n      .catch(error => error);\r\n  }\r\n\r\n\r\n  loadPosition = async () => {\r\n    try {\r\n      const position = await this.getCurrentPosition();\r\n      const { latitude, longitude } = position.coords;\r\n      this.setState({\r\n        latitude,\r\n        longitude\r\n      });\r\n      this.getLocationInfo();\r\n      console.log(this.state.latitude);\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.setState({errorMsg: error.message, weatherInfo: null});\r\n    }\r\n  };\r\n\r\n  getCurrentPosition = (options = {}) => {\r\n    return new Promise((resolve, reject) => {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if(this.state.weatherInfo) {\r\n      console.log(this.state.weatherInfo);\r\n    }\r\n    let error = '';\r\n    if(this.state.error) {\r\n      error = <p>Wpisz poprawne dane!</p>;\r\n    } else if (this.state.errorMsg) {\r\n      error = <p>{this.state.errorMsg}</p>\r\n    }else if (this.state.locationError) {\r\n      error = <p>{this.state.locationError}</p>\r\n    }\r\n\r\n    let weatherInfo = null;\r\n    if(this.state.isLoading) {\r\n      weatherInfo = <Spinner />;\r\n    } else {\r\n      weatherInfo = <WeatherData data={this.state.weatherInfo} error={!this.state.errorMsg}/>\r\n    }\r\n    return (\r\n      <div>\r\n        <input type=\"text\" name='cityName' value={this.state.cityName} onChange={this.getValue} />\r\n        <input type=\"text\" name='countryCode' value={this.state.countryCode} onChange={this.getValue} />\r\n        <button onClick={this.getWheatherData}>Get Weather</button>\r\n        <button onClick={this.loadPosition}>Get Your Position</button>\r\n        {error}\r\n        {weatherInfo}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WhaeterBuilder;\r\n","import React, { Component } from 'react';\n\nimport classes from './App.css';\nimport WheatherBuilder from './containers/WheaterBuilder/WheaterBuilder';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={classes.App}>\n        <header className={classes.AppHeader}>\n          <WheatherBuilder />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__3Ge-C\",\"AppLogo\":\"App__AppLogo__k5SJE\",\"App-logo-spin\":\"App__App-logo-spin__2zbnz\",\"AppHeader\":\"App__AppHeader__3MRQK\",\"AppLink\":\"App__AppLink__3EAhm\"};"],"sourceRoot":""}